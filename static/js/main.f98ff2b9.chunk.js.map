{"version":3,"sources":["Snake.jsx","Food.jsx","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","console","log","className","key","Food","getRandomCoordinates","Math","floor","random","App","useState","setSnakeDots","snakeFood","setSnakeFood","snakeSpeed","setSnakeSpeed","direction","setDirection","onKeyDown","e","window","event","keyCode","moveSnake","useCallback","dots","head","length","push","shift","useEffect","timer","setTimeout","document","onkeydown","checkIfEat","checkIfCollapsed","clearTimeout","snake","pop","forEach","onGameOver","food","newSnake","unshift","enlargeSnake","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f98ff2b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Snake(props) {\r\n\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`,\r\n                }\r\n                console.log(dot[0])\r\n                return (\r\n                    <div className='snake-dot' key={i} style={style}></div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Snake;","import React from 'react'\r\n\r\nfunction Food(props) {\r\n\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n\r\n    return (\r\n        <div className='snake-food' style={style} />\r\n    )\r\n}\r\n\r\nexport default Food\r\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\n// Функция для получения рандомных координат еды\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n}\n\nfunction App() {\n\n  const [snakeDots, setSnakeDots] = useState([\n    [0, 0],\n    [2, 0]\n  ]); // Координаты спавна змейки в начале игры\n  const [snakeFood, setSnakeFood] = useState(getRandomCoordinates()); // Координаты спавна еды\n  let [snakeSpeed, setSnakeSpeed] = useState(200); // Указываем скорость перемещения змейки\n  const [direction, setDirection] = useState('RIGHT'); // Направление движение змейки в начале игры\n\n\n\n  // Задаём направление движения для змейки\n  let onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        setDirection('UP');\n        break;\n      case 40:\n        setDirection('DOWN');\n        break;\n      case 37:\n        setDirection('LEFT');\n        break;\n      case 39:\n        setDirection('RIGHT');\n        break;\n      default:\n\n    }\n  }\n\n  let moveSnake = useCallback(() => {\n    let dots = [...snakeDots];\n    let head = dots[dots.length - 1];\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n      default:\n    }\n\n    if (head[0] < 0) {\n      console.log(head[0])\n      head[0] = 98;\n    }\n    if (head[1] < 0) {\n      head[1] = 98;\n    }\n    if (head[0] >= 100) {\n      head[0] = 0;\n    }\n    if (head[1] >= 100) {\n      head[1] = 0;\n    }\n\n    dots.push(head);\n    dots.shift();\n\n    setSnakeDots(dots);\n  }, [snakeDots, direction]);\n\n  useEffect(() => {\n    let timer = setTimeout(moveSnake, snakeSpeed);\n    document.onkeydown = onKeyDown;\n    checkIfEat();\n    checkIfCollapsed();\n    return () => {\n      clearTimeout(timer);\n      document.onkeydown = null;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [moveSnake]);\n\n  let checkIfCollapsed = () => {\n    let snake = [...snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        onGameOver();\n      }\n    })\n  }\n\n  let enlargeSnake = () => {\n    let newSnake = [...snakeDots];\n    newSnake.unshift([]);\n    setSnakeDots(newSnake);\n  }\n\n  let checkIfEat = () => {\n    let head = snakeDots[snakeDots.length - 1];\n    let food = snakeFood;\n\n    if (head[0] === food[0] && head[1] === food[1]) {\n      enlargeSnake();\n      setSnakeFood(getRandomCoordinates());\n      setSnakeSpeed(snakeSpeed -= 10);\n    }\n  }\n\n  let onGameOver = () => {\n    alert(`Game Over. Snake length is ${snakeDots.length}`);\n    setSnakeDots([\n      [0, 0],\n      [2, 0]\n    ]);\n    setDirection('RIGHT');\n    setSnakeSpeed(200);\n    setSnakeFood(getRandomCoordinates());\n  }\n\n  return (\n    <div className=\"container\">\n      <p>Current Snake length = {snakeDots.length} </p>\n      <div className=\"game-area\">\n        <Snake snakeDots={snakeDots} />\n        <Food dot={snakeFood} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}